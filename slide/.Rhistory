data(geyser, package="MASS")
x <- geyser$duration
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
est <- bkfe(x, drv=4, bandwidth=0.3)
est
with(cars, {
plot(speed, dist)
lines(ksmooth(speed, dist, "normal", bandwidth=2), col=2)
lines(ksmooth(speed, dist, "normal", bandwidth=5), col=3)
})
library(slide)
data <- generateModel1(n = 100, pvec = c(25,25), cvec = c(1,1), snr = 1, orthogonalV = T)
X = data$X
pvec = data$pvec
center = T
eps = 1e-6
k_max = 1000
lambda_min = 0.05
nl = 100
n_fold = 3
p_fold = 3
out_s <- standardizeX(X, pvec, center = center)
X <- out_s$X
svec <- out_s$svec
out <- solve_optim1_seq(X = X, pvec = pvec, n_lambda = nl, lambda_max = max(svec), lambda_min = lambda_min, eps = eps, k_max = k_max)
out_struct <- create_structure_list(out, pvec)
library(slide)
data <- generateModel1(n = 100, pvec = c(25,25), cvec = c(1,1), snr = 1, orthogonalV = T)
X = data$X
pvec = data$pvec
center = T
eps = 1e-6
k_max = 1000
lambda_min = 0.05
nl = 100
n_fold = 3
p_fold = 3
#  # Scale the original dataset
out_s <- standardizeX(X, pvec, center = center)
X <- out_s$X
svec <- out_s$svec
# Solve penalized matrix optimizaiton problem for the sequence of lambda values
out <- solve_optim1_seq(X = X, pvec = pvec, n_lambda = nl, lambda_max = max(svec), lambda_min = lambda_min, eps = eps, k_max = k_max)
out_struct <- create_structure_list(out, pvec)
out_struct
outbcv <- slide_BCV(X, pvec = data$pvec, structure_list = out_struct$Slist, n_fold = n_fold, p_fold=p_fold, k_max = k_max, eps = eps, center = center)
outbcv$structure_min
out_slide <- slide_givenS(X = X, pvec = pvec, S = outbcv$structure_min, k_max = k_max, eps = eps)
outbcv$error_mean
out_slide <- slide_givenS(X = X, pvec = pvec, S = outbcv$structure_min, k_max = k_max, eps = eps)
out_slide
install.packages("formatR")
formatR::tidy_dir("R")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
S = matrix(c(1,1,0,1,0,1),nrow = 2, ncol = 3)
S
devtools::document()
library(slide)
library(slide)
